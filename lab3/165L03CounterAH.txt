;*******************************************************************************
;Lab 3 - SWITCH COUNTER
;ECET165 Embedded Microcontrollers
;E165L03CounterAH.s
;Jan 24, 2023
;Aaron Huinink
;This program increments a counter with each press of the onboard switch.
;The switch is debounced to improve the counter accuracy.
;*******************************************************************************



; PIC18F57Q43 Configuration Bit Settings

; Assembly source line config statements

; CONFIG1
  CONFIG  FEXTOSC = ECH         ; External Oscillator Selection (EC (external clock) above 8 MHz)
  CONFIG  RSTOSC = EXTOSC       ; Reset Oscillator Selection (EXTOSC operating per FEXTOSC bits (device manufacturing default))

; CONFIG2
  CONFIG  CLKOUTEN = OFF        ; Clock out Enable bit (CLKOUT function is disabled)
  CONFIG  PR1WAY = ON           ; PRLOCKED One-Way Set Enable bit (PRLOCKED bit can be cleared and set only once)
  CONFIG  CSWEN = ON            ; Clock Switch Enable bit (Writing to NOSC and NDIV is allowed)
  CONFIG  FCMEN = ON            ; Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)

; CONFIG3
  CONFIG  MCLRE = EXTMCLR       ; MCLR Enable bit (If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR )
  CONFIG  PWRTS = PWRT_OFF      ; Power-up timer selection bits (PWRT is disabled)
  CONFIG  MVECEN = ON           ; Multi-vector enable bit (Multi-vector enabled, Vector table used for interrupts)
  CONFIG  IVT1WAY = ON          ; IVTLOCK bit One-way set enable bit (IVTLOCKED bit can be cleared and set only once)
  CONFIG  LPBOREN = OFF         ; Low Power BOR Enable bit (Low-Power BOR disabled)
  CONFIG  BOREN = SBORDIS       ; Brown-out Reset Enable bits (Brown-out Reset enabled , SBOREN bit is ignored)

; CONFIG4
  CONFIG  BORV = VBOR_1P9       ; Brown-out Reset Voltage Selection bits (Brown-out Reset Voltage (VBOR) set to 1.9V)
  CONFIG  ZCD = OFF             ; ZCD Disable bit (ZCD module is disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON)
  CONFIG  PPS1WAY = ON          ; PPSLOCK bit One-Way Set Enable bit (PPSLOCKED bit can be cleared and set only once; PPS registers remain locked after one clear/set cycle)
  CONFIG  STVREN = ON           ; Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
  CONFIG  LVP = ON              ; Low Voltage Programming Enable bit (Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE configuration bit is ignored)
  CONFIG  XINST = OFF           ; Extended Instruction Set Enable bit (Extended Instruction Set and Indexed Addressing Mode disabled)

; CONFIG5
  CONFIG  WDTCPS = WDTCPS_31    ; WDT Period selection bits (Divider ratio 1:65536; software control of WDTPS)
  CONFIG  WDTE = OFF            ; WDT operating mode (WDT Disabled; SWDTEN is ignored)

; CONFIG6
  CONFIG  WDTCWS = WDTCWS_7     ; WDT Window Select bits (window always open (100%); software control; keyed access not required)
  CONFIG  WDTCCS = LFINTOSC     ; WDT input clock selector (WDT reference clock is the 31.0 kHz LFINTOSC)

; CONFIG7
  CONFIG  BBSIZE = BBSIZE_512   ; Boot Block Size selection bits (Boot Block size is 512 words)
  CONFIG  BBEN = OFF            ; Boot Block enable bit (Boot block disabled)
  CONFIG  SAFEN = OFF           ; Storage Area Flash enable bit (SAF disabled)
  CONFIG  DEBUG = OFF           ; Background Debugger (Background Debugger disabled)

; CONFIG8
  CONFIG  WRTB = OFF            ; Boot Block Write Protection bit (Boot Block not Write protected)
  CONFIG  WRTC = OFF            ; Configuration Register Write Protection bit (Configuration registers not Write protected)
  CONFIG  WRTD = OFF            ; Data EEPROM Write Protection bit (Data EEPROM not Write protected)
  CONFIG  WRTSAF = OFF          ; SAF Write protection bit (SAF not Write Protected)
  CONFIG  WRTAPP = OFF          ; Application Block write protection bit (Application Block not write protected)

; CONFIG10
  CONFIG  CP = OFF              ; PFM and Data EEPROM Code Protection bit (PFM and Data EEPROM code protection disabled)
    
PROCESSOR 18F57Q43
#include <xc.inc>
    
#define	BUTTON	RB4	;register b bit 4
  
PSECT	udata_acs		; program section unassigned data in access bank
	
global outerCount		; Define outerCount variable
global innerCount		; Define innerCount variable
global COUNTER			; Define COUNTER variable
	
outerCount: DS 1		; set datasize 1 byte for all
innerCount: DS 1
COUNTER: DS 1
    
    PSECT resetVec, class=CODE, reloc=2	
    
resetVec:
    goto main
   
    PSECT code
 
main:			;program starts here
     
    ;from lab 2, set i/o ports
    BANKSEL PORTC		
    clrf    PORTC		;clear portc
    
    BANKSEL TRISC
    clrf    TRISC,a		;make port C an output port
    
    BANKSEL TRISB
    bsf	    TRISB4		;make button bit input
    
    BANKSEL ANSELC
    clrf    ANSELC,a		;make led output port digital
    
    BANKSEL ANSELB
    bcf	    ANSELB4		;make button bit digital
    
    BANKSEL WPUB
    bsf	    WPUB4		;enable weak pullup for button
    
    clrf    WREG,A		;clear the working reg
    clrf    COUNTER,A		;clear counter register
    clrf    PORTC,A		;clear portc to turn off all LEDs at start
    
waitForPush:
    BTFSC   BUTTON		;is button pressed?
    GOTO    waitForPush		;no - loop again
    call    delay20ms		;yes - delay ~20ms
    
    incf    COUNTER, F, A   	;increment counter by 1
    movf    COUNTER, W, A   	;move value in counter to wreg
    movwf   PORTC,A	    	;display on portc

waitForRelease:
    btfss   BUTTON		;is button released?
    goto    waitForRelease  	;no - loop again
    goto    waitForPush
    
delay20ms:
    movlw   30			;send a value of 30 to WREG
    movwf   outerCount, A	;send 30 to outerCount reg
    
    movlw   28			;send a value of 28 to WREG
    movwf   innerCount, A	;send 28 from wreg to outerCount reg
    
delayOuter:
delayInner:
    decfsz  innerCount, F, A	;decrement innerCount, leave in the file reg in the access bank
    goto    delayInner		;if innerCount is not 0, go back to delayInner
    decfsz  outerCount, F, A	;decrement outerCount, leave in file reg in access bank
    goto    delayOuter		;if outerCount is not 0, go back to delayOuter
    nop				;no op
    nop    			;no op
    return			;return to waitForPush
end resetVec